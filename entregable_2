const fs = require('fs');

class ProductManager {
  constructor(filePath) {
    this.path = filePath;
    this.nextId = 1; // Inicializamos el contador de IDs en 1
  }

  async initialize() {
    try {
      // Intentamos cargar los productos del archivo si existe
      const data = await fs.promises.readFile(this.path, 'utf8');
      this.products = JSON.parse(data);
      // Encontramos el siguiente ID disponible
      this.nextId = Math.max(...this.products.map((product) => product.id), 0) + 1;
    } catch (error) {
      // Si el archivo no existe, inicializamos el arreglo de productos vacío
      this.products = [];
    }
  }

  async saveToFile() {
    try {
      // Guardamos los productos en el archivo
      await fs.promises.writeFile(this.path, JSON.stringify(this.products, null, 2), 'utf8');
    } catch (error) {
      throw new Error('No se pudo guardar en el archivo.');
    }
  }

  async addProduct(product) {
    // Asignamos un ID único al producto y lo agregamos al arreglo
    product.id = this.nextId++;
    this.products.push(product);
    await this.saveToFile();
  }

  async getProducts() {
    return this.products;
  }

  async getProductById(id) {
    const product = this.products.find((p) => p.id === id);
    return product;
  }

  async updateProduct(id, updatedProduct) {
    const index = this.products.findIndex((p) => p.id === id);
    if (index !== -1) {
      // Actualizamos el producto sin cambiar su ID
      this.products[index] = { ...updatedProduct, id };
      await this.saveToFile();
    } else {
      throw new Error('Producto no encontrado.');
    }
  }

  async deleteProduct(id) {
    const index = this.products.findIndex((p) => p.id === id);
    if (index !== -1) {
      // Eliminamos el producto del arreglo
      this.products.splice(index, 1);
      await this.saveToFile();
    } else {
      throw new Error('Producto no encontrado.');
    }
  }
}

// Uso de la clase
const productManager = new ProductManager('productos.json');

(async () => {
  try {
    await productManager.initialize();

    // Agregar un producto
    await productManager.addProduct({
      title: 'Producto 1',
      description: 'Descripción del Producto 1',
      price: 19.99,
      thumbnail: 'imagen1.jpg',
      code: 'P001',
      stock: 10,
    });

    // Consultar todos los productos
    const products = await productManager.getProducts();
    console.log('Productos:', products);

    // Consultar un producto por ID
    const productId = 1;
    const productById = await productManager.getProductById(productId);
    console.log(`Producto con ID ${productId}:`, productById);

    // Actualizar un producto
    const updatedProduct = {
      title: 'Producto Actualizado',
      description: 'Descripción actualizada',
      price: 29.99,
      thumbnail: 'imagen_actualizada.jpg',
      code: 'P002',
      stock: 5,
    };
    await productManager.updateProduct(productId, updatedProduct);

    // Eliminar un producto por ID
    await productManager.deleteProduct(productId);
  } catch (error) {
    console.error('Error:', error.message);
  }
})();
